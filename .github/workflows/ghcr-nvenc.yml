name: "Push nvenc image to ghcr"

on:
  push:
    branches: [main]
    paths-ignore:
      - '.github/**'
    tags:
      - v*.*.*
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wanjohiryan/warp
  BASE_TAG_PREFIX: nvenc

jobs:
  build-go:
    name: Build go binary
    runs-on: ubuntu-latest
     #
    # do not run on forks
    #
    if: github.repository_owner == 'wanjohiryan'
    steps: 
      -
        name: Checkout repo
        uses: actions/checkout@v3
      - 
        name: Install robotgo
        run: |
          set -o pipefail
          
          sudo apt-get update; \
          sudo apt-get install -y xvfb \
          libx11-dev libx11-dev xorg-dev libxtst-dev xsel xclip libpng++-dev xcb libxcb-xkb-dev x11-xkb-utils \
          libx11-xcb-dev libxkbcommon-x11-dev libxkbcommon-dev

        shell: bash
      - 
        name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18
      #TODO: Find a way to test this before building
      - 
        name: Build binary
        run: go build -v ./
      -
       name: Upload artifact
       uses: actions/upload-artifact@v3
       with:
         name: gobinary
         path: ./warp
         retention-days: 5

  build-certs:
    name: Build self-signed certs
     #
    # do not run on forks
    #
    if: github.repository_owner == 'wanjohiryan'
    runs-on: ubuntu-latest
    steps: 
      - 
        name: Install mkcert
        run: |
          set -o pipefail
          
          sudo apt-get update; \
          sudo apt-get install wget; \
          sudo wget -nv -O /usr/local/bin/mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64; \
          sudo chmod +x /usr/local/bin/mkcert;

        shell: bash
      - 
        name: Create certs
        run: |
          set -o pipefail

          mkdir ./certs && cd ./certs
          
          mkcert -cert-file localhost.crt -key-file localhost.key localhost 127.0.0.1 ::1        
        shell: bash
      -
        name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: certfiles
          path: certs/
          retention-days: 5
    
  build-nvidia-base:
    runs-on: ubuntu-latest
    needs:
     - build-go
     - build-certs
    permissions:
      contents: read
      packages: write
    #
    # do not run on forks
    #
    if: github.repository_owner == 'wanjohiryan'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract Container metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.BASE_TAG_PREFIX }}
          #tag on release, and a nightly build for 'dev'
          tags: |
            type=raw,value=nightly,enable={{is_default_branch}}
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      
      -
        name: Download go binary
        uses: actions/download-artifact@v3
        with:
          name: gobinary
          path: ./
      -
        name: Download certs folder
        uses: actions/download-artifact@v3
        with:
          name: certfiles
          path: ./

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: docker/nvidia/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}