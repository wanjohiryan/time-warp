name: "Push nvenc image to ghcr"

on:
  push:
    branches: [main]
    paths-ignore:
      - '.github/**'
    tags:
      - v*.*.*
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wanjohiryan/warp
  BASE_TAG_PREFIX: base

jobs:
  #FIXME: turn this into rust CI
  # build-go:
  #   name: Build go binary
  #   runs-on: ubuntu-latest
  #    #
  #   # do not run on forks
  #   #
  #   steps: 
  #     -
  #       name: Checkout repo
  #       uses: actions/checkout@v3
  #     - 
  #       name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: 1.18
  #     #TODO: Find a way to test this before building
  #     - 
  #       name: Build binary
  #       run: go build -v ./
  #     -
  #      name: Upload artifact
  #      uses: actions/upload-artifact@v3
  #      with:
  #        name: gobinary
  #        path: ./warp
  #        retention-days: 5    
  build-nvidia-base:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    #
    # do not run on forks
    #
    if: github.repository_owner == 'wanjohiryan'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Container metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.BASE_TAG_PREFIX }}
          #tag on release, and a nightly build for 'dev'
          tags: |
            type=raw,value=nightly,enable={{is_default_branch}}
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: docker/base/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}