name: Create and test docker image

on:
  pull_request:

jobs:
  check-workflow:
    name: Check whether only .github has changed
    runs-on: ubuntu-latest
    outputs:
      workflow: ${{ steps.filter.outputs.workflows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3      
      -
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workflows:
                - '.github/**'
      - 
        name: workflow tests
        if: steps.filter.outputs.workflows == 'true'
        run: echo "Workflow file"

      - 
        name: not workflow tests
        if: steps.filter.outputs.workflows != 'true'
        run: echo "NOT workflow file"

  build-go:
    name: Build go binary
    runs-on: ubuntu-latest
    needs: 
      - check-workflow
    if: needs.check-workflow.outputs.workflow != 'true'
    steps: 
      -
        name: Checkout repo
        uses: actions/checkout@v3
      -
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
                - '.github/**'
      - 
        name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18
      #TODO: Find a way to test this before building
      - 
        name: Build binary
        run: go build -v ./
      -
       name: Upload artifact
       uses: actions/upload-artifact@v3
       with:
         name: gobinary
         path: ./warp
         retention-days: 5

  build-certs:
    name: Build self-signed certs
    runs-on: ubuntu-latest
    needs: 
      - check-workflow
    if: needs.check-workflow.outputs.workflow != 'true'
    steps: 
      - 
        name: Install mkcert
        run: |
          set -o pipefail
          
          sudo apt-get update; \
          sudo apt-get install wget; \
          sudo wget -nv -O /usr/local/bin/mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64; \
          sudo chmod +x /usr/local/bin/mkcert;

        shell: bash
      - 
        name: Create certs
        run: |
          set -o pipefail

          mkdir ./certs && cd ./certs
          
          mkcert -cert-file localhost.crt -key-file localhost.key localhost 127.0.0.1 ::1

          ls -l && cd .. && ls -l 
        
        shell: bash
      -
        name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: certfiles
          path: certs/
          retention-days: 5

  build-docker-nvidia:
      name: Build nvidia base image
      needs: 
        - build-go
        - build-certs
      runs-on: ubuntu-latest
      steps:
        -
          name: Checkout repo
          uses: actions/checkout@v3
        -
          name: Download go binary
          uses: actions/download-artifact@v3
          with:
            name: gobinary
            path: ./
        -
          name: Download certs folder
          uses: actions/download-artifact@v3
          with:
            name: certfiles
            path: ./
        - 
          name: Setup Docker Buildx
          uses: docker/setup-buildx-action@v2
        - 
          name: Build Docker image
          uses: docker/build-push-action@v4
          with:
            context: ./
            file: docker/nvidia/Dockerfile
            push: false
            load: true
            tags: warp:nvenc
        - 
          name: Run Docker Container
          #error code 124 is timeout error
          run: |
            set -o pipefail
            output=$(timeout 2m docker run warp:nvenc 2>&1) || exitcode=$?

            if [[ $exitcode != 0 && $exitcode != 124 ]]; then
              echo "$output"
              exit $exitcode
            else 
              echo "$output"
             echo -e "\033[01;34mDocker run successful\033[0m"
              exit 0
            fi
          shell: bash
