var u=class{state;channels;capacity;constructor(t){this.state=new Int32Array(t.state),this.channels=[];for(let e of t.channels)this.channels.push(new Float32Array(e));this.capacity=t.capacity}write(t){let e=t.numberOfFrames,l=Atomics.load(this.state,0),n=Atomics.load(this.state,1),i=n+e;if(i-l>this.capacity)return!1;let o=n%this.capacity,s=i%this.capacity;for(let r=0;r<this.channels.length;r+=1){let c=this.channels[r];if(o<s){let a=c.subarray(o,s);t.copyTo(a,{planeIndex:r,frameCount:e})}else if(o>=s&&s!=0){let a=c.subarray(o),h=c.subarray(0,s);t.copyTo(a,{planeIndex:r,frameCount:a.length}),t.copyTo(h,{planeIndex:r,frameOffset:a.length,frameCount:h.length})}}return Atomics.store(this.state,1,i),!0}read(t){let e=Atomics.load(this.state,0),l=Atomics.load(this.state,1);if(e>=l)return;let n=e+t[0].length;n>l&&(n=l);let i=e%this.capacity,o=n%this.capacity;for(let s=0;s<t.length;s+=1){s>=this.channels.length;let r=this.channels[s],c=t[s];if(i<o){let a=r.subarray(i,o);c.set(a)}else{let a=r.subarray(i),h=r.subarray(0,o);c.set(a),c.set(h,a.length)}}Atomics.store(this.state,0,n)}clear(){let t=Atomics.load(this.state,1);Atomics.store(this.state,0,t)}};var f=class extends AudioWorkletProcessor{ring;base;constructor(t){super(),this.base=0,this.port.onmessage=this.onMessage.bind(this)}onMessage(t){t.data.config&&this.config(t.data.config)}config(t){this.ring=new u(t.ring)}process(t,e,l){if(!this.ring)return!0;if(t.length!=1&&e.length!=1)throw new Error("only a single track is supported");let n=e[0];return this.ring.read(n),!0}};registerProcessor("renderer",f);
