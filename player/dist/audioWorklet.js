var u=class{state;channels;capacity;constructor(t){this.state=new Int32Array(t.state),this.channels=[];for(let e of t.channels)this.channels.push(new Float32Array(e));this.capacity=t.capacity}write(t){let e=t.numberOfFrames,l=Atomics.load(this.state,0),a=Atomics.load(this.state,1),o=a+e;if(o-l>this.capacity)return!1;let i=a%this.capacity,n=o%this.capacity;for(let r=0;r<this.channels.length;r+=1){let c=this.channels[r];if(i<n){let s=c.subarray(i,n);t.copyTo(s,{planeIndex:r,frameCount:e})}else{let s=c.subarray(i),h=c.subarray(0,n);t.copyTo(s,{planeIndex:r,frameCount:s.length}),s.length<h.length&&t.copyTo(h,{planeIndex:r,frameOffset:s.length,frameCount:h.length})}}return Atomics.store(this.state,1,o),!0}read(t){let e=Atomics.load(this.state,0),l=Atomics.load(this.state,1);if(e>=l)return;let a=e+t[0].length;a>l&&(a=l);let o=e%this.capacity,i=a%this.capacity;for(let n=0;n<t.length;n+=1){n>=this.channels.length;let r=this.channels[n],c=t[n];if(o<i){let s=r.subarray(o,i);c.set(s)}else{let s=r.subarray(o),h=r.subarray(0,i);c.set(s),c.set(h,s.length)}}Atomics.store(this.state,0,a)}clear(){let t=Atomics.load(this.state,1);Atomics.store(this.state,0,t)}};var f=class extends AudioWorkletProcessor{ring;base;constructor(t){super(),this.base=0,this.port.onmessage=this.onMessage.bind(this)}onMessage(t){t.data.config&&this.config(t.data.config)}config(t){this.ring=new u(t.ring)}process(t,e,l){if(!this.ring)return!0;if(t.length!=1&&e.length!=1)throw new Error("only a single track is supported");let a=e[0];return this.ring.read(a),!0}};registerProcessor("renderer",f);
